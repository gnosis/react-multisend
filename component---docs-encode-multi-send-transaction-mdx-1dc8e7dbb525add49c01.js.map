{"version":3,"sources":["webpack:///../docs/encode-multi-send-transaction.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","name","parentName","isMDXComponent"],"mappings":"oRAQaA,EAAe,Q,wNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAGC,KAAK,qBAHH,qEAKL,sBACE,kBAAIC,WAAW,MAAK,0BAAYA,WAAW,MAAvB,iCAApB,kDACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,uCAApB,yCACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,gCAApB,iFACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,uBAApB,4EAEF,kMAEc,iBAAGA,WAAW,IACxB,KAAQ,0CACP,0BAAYA,WAAW,KAAvB,sBAJL,0FAKA,uHAAsG,iBAAGA,WAAW,IAChH,KAAQ,qCACP,0BAAYA,WAAW,KAAvB,iBAFL,0BAGS,0BAAYA,WAAW,KAAvB,oBAHT,kBAGwF,0BAAYA,WAAW,KAAvB,mBAHxF,gDAGoM,0BAAYA,WAAW,KAAvB,QAHpM,WAIA,0DAAyC,0BAAYA,WAAW,KAAvB,mBAAzC,0CAA+I,0BAAYA,WAAW,KAAvB,mBAA/I,sCAAiP,0BAAYA,WAAW,KAAvB,aAAjP,uEAA8W,0BAAYA,WAAW,KAAvB,QAA9W,iCACyB,iBAAGA,WAAW,IACnC,KAAQ,oCACP,0BAAYA,WAAW,KAAvB,gBAHL,cAIA,iCACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,eADZ,0MAQL,2GACA,sBACE,kBAAIA,WAAW,MAAf,2CAAgE,0BAAYA,WAAW,MAAvB,gCAAhE,UAAoJ,iBAAGA,WAAW,KAC9J,KAAQ,8EADwI,+BAApJ,KAGA,kBAAIA,WAAW,MAAf,kCAAuD,0BAAYA,WAAW,MAAvB,mBAAvD,uDAA2K,iBAAGA,WAAW,KACrL,KAAQ,4DAD+J,cAA3K,KAGA,kBAAIA,WAAW,MAAf,2DAAgF,0BAAYA,WAAW,MAAvB,eAAhF,aAAsJ,iBAAGA,WAAW,KAChK,KAAQ,+EAD0I,cAAtJ,KAGA,kBAAIA,WAAW,MAAf,wFAA6G,iBAAGA,WAAW,KACvH,KAAQ,uEADiG,8BAI/G,sCAAqB,iBAAGA,WAAW,IAC/B,KAAQ,4EADS,4BAArB,mEAEyG,iBAAGA,WAAW,IACnH,KAAQ,kFAD6F,kCAFzG,+E,sNASJL,EAAWM,gBAAiB","file":"component---docs-encode-multi-send-transaction-mdx-1dc8e7dbb525add49c01.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-multisend/react-multisend/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <a name=\"transactionTypes\"></a>The library support defining transactions of four\ndifferent kinds:\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`TransactionType.transferFunds`}</inlineCode>{`: Transfer an amount of ETH or any ERC20 token`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`TransactionType.transferCollectible`}</inlineCode>{`: Transfer a non-fungible token (NFT)`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`TransactionType.callContract`}</inlineCode>{`: Call a verified contract by selecting a function and providing input values`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`TransactionType.raw`}</inlineCode>{`: Any other transaction can be defined by provided the raw encoded data`}</li>\n    </ul>\n    <p>{`Each of these types comes with its own JSON structure for representing transactions.\nYou can find the corresponding interfaces at: `}{`[src/types.ts]`}{`\nYou may use the `}<a parentName=\"p\" {...{\n        \"href\": \"/react-multisend/api/createTransaction\"\n      }}><inlineCode parentName=\"a\">{`createTransaction`}</inlineCode></a>{` function as a convenient way for creating a new, empty transaction of a certain type.`}</p>\n    <p>{`The first step of encoding a list of transactions into an executable format is provided by the `}<a parentName=\"p\" {...{\n        \"href\": \"/react-multisend/api/encodeSingle\"\n      }}><inlineCode parentName=\"a\">{`encodeSingle`}</inlineCode></a>{` function.\nIt turns a `}<inlineCode parentName=\"p\">{`TransactionInput`}</inlineCode>{` object into a `}<inlineCode parentName=\"p\">{`MetaTransaction`}</inlineCode>{`, i.e., a representation with an ABI encoded `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` field.`}</p>\n    <p>{`The second step takes an array of `}<inlineCode parentName=\"p\">{`MetaTransaction`}</inlineCode>{` objects, and encodes it into a single `}<inlineCode parentName=\"p\">{`MetaTransaction`}</inlineCode>{` object describing the call to the `}<inlineCode parentName=\"p\">{`MultiSend`}</inlineCode>{` contract where the individual transactions are packed encoded into `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{`.\nThis is implemented in the `}<a parentName=\"p\" {...{\n        \"href\": \"/react-multisend/api/encodeMulti\"\n      }}><inlineCode parentName=\"a\">{`encodeMulti`}</inlineCode></a>{` function.`}</p>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { isValid, encodeSingle, encodeMulti } from 'react-multisend'\n\nif (transactionInputs.every(isValid)) {\n  const multiSendTransaction = encodeMulti(transactionInputs.map(encodeSingle))\n}\n`}</code></pre>\n    <p>{`There are various options for executing a multi-send transaction encoded this way:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`from any enabled Safe/Zodiac module via `}<inlineCode parentName=\"li\">{`executeTransactionFromModule`}</inlineCode>{` (see: `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/gnosis/zodiac/blob/master/contracts/core/Module.sol#L43\"\n        }}>{`Zodiac Module base contract`}</a>{`)`}</li>\n      <li parentName=\"ul\">{`directly by calling the Safe's `}<inlineCode parentName=\"li\">{`execTransaction`}</inlineCode>{` function, providing the required owner signatures (`}<a parentName=\"li\" {...{\n          \"href\": \"https://docs.gnosis.io/safe/docs/contracts_tx_execution/\"\n        }}>{`learn more`}</a>{`)`}</li>\n      <li parentName=\"ul\">{`collecting the required signatures on-chain, by calling `}<inlineCode parentName=\"li\">{`approveHash`}</inlineCode>{` upfront (`}<a parentName=\"li\" {...{\n          \"href\": \"https://docs.gnosis.io/safe/docs/contracts_tx_execution/#on-chain-approvals\"\n        }}>{`learn more`}</a>{`)`}</li>\n      <li parentName=\"ul\">{`collecting the required signatures off-chain, by proposing the transaction using the `}<a parentName=\"li\" {...{\n          \"href\": \"https://docs.gnosis.io/safe/docs/tutorial_tx_service_initiate_sign/\"\n        }}>{`Safe Transaction Service`}</a></li>\n    </ul>\n    <p>{`Check out the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/gnosis/safe-core-sdk/tree/main/packages/safe-core-sdk\"\n      }}>{`@gnosis.pm/safe-core-sdk`}</a>{` package for interacting with the Gnosis Safe contracts and the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/gnosis/safe-core-sdk/tree/main/packages/safe-service-client\"\n      }}>{`@gnosis.pm/safe-service-client`}</a>{` package for using the Safe Transaction Service from JavaScript apps.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}