(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{k2q9:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return d}));var a=n("Fcif"),r=n("+I+c"),l=(n("mXGw"),n("/FXl")),b=n("TjRS"),i=(n("aD51"),["components"]),c={};void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/usage.mdx"}});var o={_frontmatter:c},s=b.a;function d(e){var t=e.components,n=Object(r.a)(e,i);return Object(l.b)(s,Object(a.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h1",{id:"usage"},"Usage"),Object(l.b)("h2",{id:"installation"},"Installation"),Object(l.b)("p",null,"This module is distributed via npm. For adding it to your project, run:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"npm install --save react-multisend\n")),Object(l.b)("p",null,"To install it using yarn, run:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"yarn add react-multisend\n")),Object(l.b)("p",null,"This package also depends on ",Object(l.b)("inlineCode",{parentName:"p"},"react"),". Please make sure you have it installed as well."),Object(l.b)("h2",{id:"transfer-funds-and-collectibles"},"Transfer funds and collectibles"),Object(l.b)("p",null,"When building UI components for defining token transfer transactions it is useful to present a list of tokens held by the Gnosis Safe as the designated sender.\nThe library offers two hooks to make that easy.\nBoth hooks take the same props as an argument, defining the Gnosis Safe instance to connect to and whether to fetch the information directly or only upon request."),Object(l.b)("h4",{id:"props"},"Props"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null}),Object(l.b)("th",{parentName:"tr",align:null}),Object(l.b)("th",{parentName:"tr",align:null}))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"address"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"string")),Object(l.b)("td",{parentName:"tr",align:null},"The address of the Gnosis Safe")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"network"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"string")),Object(l.b)("td",{parentName:"tr",align:null},"The ID of the chain on which the Gnosis Safe lives")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"lazy"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"boolean")),Object(l.b)("td",{parentName:"tr",align:null},"When set to ",Object(l.b)("inlineCode",{parentName:"td"},"true")," it won't fetch until the ",Object(l.b)("inlineCode",{parentName:"td"},"fetch")," callback is invoked")))),Object(l.b)("h3",{id:"usesafebalances-hook"},Object(l.b)("inlineCode",{parentName:"h3"},"useSafeBalances")," hook"),Object(l.b)("p",null,"This hook provides information about the Gnosis Safe's balances of ETH and ERC20 tokens."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-ts"},"const [balances, { loading, error, fetch }] = useSafeBalances({\n  address,\n  network,\n  lazy,\n})\n")),Object(l.b)("h4",{id:"return-value"},"Return value"),Object(l.b)("p",null,"The first item in the tuple is the list of ",Object(l.b)("inlineCode",{parentName:"p"},"Balance")," objects, one for each ERC20 token held by the Safe and one representing the ETH balance.\nThe ETH balance is identified with ",Object(l.b)("inlineCode",{parentName:"p"},"null")," values for the ",Object(l.b)("inlineCode",{parentName:"p"},"token")," and ",Object(l.b)("inlineCode",{parentName:"p"},"tokenAddress")," fields."),Object(l.b)("p",null,"Example:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-json"},'[\n  { "tokenAddress": null, "token": null, "balance": "100000000000000000" },\n  {\n    "tokenAddress": "0xa7D1C04fAF998F9161fC9F800a99A809b84cfc9D",\n    "token": {\n      "name": "OWL Token",\n      "symbol": "OWL",\n      "decimals": 18,\n      "logoUri": "https://gnosis-safe-token-logos.s3.amazonaws.com/0xa7D1C04fAF998F9161fC9F800a99A809b84cfc9D.png"\n    },\n    "balance": "100000000000000000000"\n  },\n  {\n    "tokenAddress": "0xc778417E063141139Fce010982780140Aa0cD5Ab",\n    "token": {\n      "name": "Wrapped Ether",\n      "symbol": "WETH",\n      "decimals": 18,\n      "logoUri": "https://gnosis-safe-token-logos.s3.amazonaws.com/0xc778417E063141139Fce010982780140Aa0cD5Ab.png"\n    },\n    "balance": "1000000000000000000"\n  }\n]\n')),Object(l.b)("p",null,"The second item in the return tuple is an object that provides the request state for fetching the balances:"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null}),Object(l.b)("th",{parentName:"tr",align:null}),Object(l.b)("th",{parentName:"tr",align:null}))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"loading"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"boolean")),Object(l.b)("td",{parentName:"tr",align:null},"Indicates whether the request is currently running")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"error"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"Error")," or ",Object(l.b)("inlineCode",{parentName:"td"},"null")),Object(l.b)("td",{parentName:"tr",align:null},"If the request failed, this field will provide error information")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"fetch"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"function")),Object(l.b)("td",{parentName:"tr",align:null},"Callback for triggering the request")))),Object(l.b)("h3",{id:"usesafecollectibles-hook"},Object(l.b)("inlineCode",{parentName:"h3"},"useSafeCollectibles")," hook"),Object(l.b)("p",null,"This hook provides information about NFTs (ERC-721 token) held in the Gnosis Safe."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-ts"},"const [collectibles, { loading, error, fetch }] = useSafeCollectibles({\n  address,\n  network,\n  lazy,\n})\n")),Object(l.b)("h4",{id:"return-value-1"},"Return value"),Object(l.b)("p",null,"The first item in the tuple is the list of ",Object(l.b)("inlineCode",{parentName:"p"},"Collectible")," objects, one for each NFT held by the Safe. Example:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "address": "0x16542D57057Ee50C6FA7d95b44b7eC5a1ab0B410",\n    "tokenName": "Ben\'s NFT Store",\n    "tokenSymbol": "ETH",\n    "logoUri": "https://gnosis-safe-token-logos.s3.amazonaws.com/0x16542D57057Ee50C6FA7d95b44b7eC5a1ab0B410.png",\n    "id": "12",\n    "uri": "https://arweave.net/1LPEBm4iiG5PhUcNqnee2WeLn-fPq9mbT6sfBZAOSGQ",\n    "name": "Sam",\n    "description": "Tokenized Image of Sam A",\n    "imageUri": "https://arweave.net/xRCOWRmpjlVzqboTN-VV6RYqad1PtyZwjv6tUrq2mn0",\n    "metadata": {\n      "minter": "0x7f01d9b227593e033bf8d6fc86e634d27aa85568",\n      "mintedOn": "2021-09-30T07:36:55.021Z",\n      "name": "Sam",\n      "description": "Tokenized Image",\n      "category": "DuNvaKK8KICzyMuTex2F",\n      "type": "ERC721"\n    }\n  }\n]\n')),Object(l.b)("p",null,"The second item in the return tuple is an object that provides the request state for fetching the list of collectibles:"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null}),Object(l.b)("th",{parentName:"tr",align:null}),Object(l.b)("th",{parentName:"tr",align:null}))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"loading"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"boolean")),Object(l.b)("td",{parentName:"tr",align:null},"Indicates whether the request is currently running")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"error"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"Error")," or ",Object(l.b)("inlineCode",{parentName:"td"},"null")),Object(l.b)("td",{parentName:"tr",align:null},"If the request failed, this field will provide error information")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"fetch"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"function")),Object(l.b)("td",{parentName:"tr",align:null},"Callback for triggering the request")))),Object(l.b)("h2",{id:"arbitrary-contract-calls"},"Arbitrary contract calls"),Object(l.b)("p",null,"The package offers an additional hooks for making contract function calls leveraging the contract's interface."),Object(l.b)("h3",{id:"usecontractcall-hook"},Object(l.b)("inlineCode",{parentName:"h3"},"useContractCall")," hook"),Object(l.b)("p",null,"This hook fetches smart contract interface information from Etherscan or the respective block explorers of other chains."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-ts"},"const { functions, inputs, payable, loading } = useContractCall({\n  value,\n  onChange,\n  network,\n  blockExplorerApiKey,\n})\n")),Object(l.b)("p",null,"It reads and updates a ",Object(l.b)("inlineCode",{parentName:"p"},"CallContractTransactionInput")," value, which has the following fields:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-ts"},"{\n  to: string // contract address\n  value: string // amount of wei to send\n  abi: string // contract interface ABI as JSON string\n  functionSignature: string // function to call\n  inputValues: { [key: string]: ValueType } // values to pass as input parameters with the function call\n}\n")),Object(l.b)("h4",{id:"props-1"},"Props"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null}),Object(l.b)("th",{parentName:"tr",align:null}),Object(l.b)("th",{parentName:"tr",align:null}))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"value"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"CallContractTransactionInput")),Object(l.b)("td",{parentName:"tr",align:null},"The contract call transaction input from state")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"onChange"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"(value: CallContractTransactionInput): void")),Object(l.b)("td",{parentName:"tr",align:null},"The handler prop for updating the transaction input in the state")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"network"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"string")),Object(l.b)("td",{parentName:"tr",align:null},"The ID of the chain on which the Gnosis Safe lives")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"blockExplorerApiKey"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"string")),Object(l.b)("td",{parentName:"tr",align:null},"(optional) An API key for Etherscan or the block explorer for the given network")))),Object(l.b)("h4",{id:"return-value-2"},"Return value"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null}),Object(l.b)("th",{parentName:"tr",align:null}),Object(l.b)("th",{parentName:"tr",align:null}))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"functions"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"ContractFunction[]")),Object(l.b)("td",{parentName:"tr",align:null},"All state updating functions of the contract")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"inputs"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"Input[]")),Object(l.b)("td",{parentName:"tr",align:null},"For each parameter of the currently selected function, it contains an object with type information and the input value from state")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"payable"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"boolean")),Object(l.b)("td",{parentName:"tr",align:null},"Indicates whether the currently selected function is payable")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"loading"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"boolean")),Object(l.b)("td",{parentName:"tr",align:null},"Indicates whether the request is currently running")))),Object(l.b)("h2",{id:"encode-for-execution"},"Encode for execution"),Object(l.b)("a",{name:"transactionType"}),"The library supports defining transactions of four different kinds:",Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null}),Object(l.b)("th",{parentName:"tr",align:null}))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"TransactionType.transferFunds")),Object(l.b)("td",{parentName:"tr",align:null},"Transfer an amount of ETH or any ERC20 token")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"TransactionType.transferCollectible")),Object(l.b)("td",{parentName:"tr",align:null},"Transfer a non-fungible token (NFT)")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"TransactionType.callContract")),Object(l.b)("td",{parentName:"tr",align:null},"Call a verified contract by selecting a function and providing input values")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"TransactionType.raw")),Object(l.b)("td",{parentName:"tr",align:null},"Any other transaction can be defined by provided the raw encoded data")))),Object(l.b)("p",null,"Each of these types comes with its own JSON structure for storing transaction inputs.\nYou can find the corresponding interfaces at: ",Object(l.b)("a",{parentName:"p",href:"https://github.com/gnosis/react-multisend/blob/main/src/types.ts"},"src/types.ts")),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"TransactionInput")," JSON structure is not directly useful for execution but needs to be mapped to the ",Object(l.b)("inlineCode",{parentName:"p"},"MetaTransaction")," type used by Gnosis Safe to represent transactions.\nThe library offers two functions, ",Object(l.b)("inlineCode",{parentName:"p"},"encodeSingle")," and ",Object(l.b)("inlineCode",{parentName:"p"},"encodeMulti"),", that are combined to achieve this."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-ts"},"encodeSingle(transactionInput: TransactionInput): MetaTransaction\n")),Object(l.b)("p",null,"The first step of encoding a list of transaction inputs into an executable format is provided by the ",Object(l.b)("inlineCode",{parentName:"p"},"encodeSingle")," function.\nIt turns a ",Object(l.b)("inlineCode",{parentName:"p"},"TransactionInput")," object into a ",Object(l.b)("inlineCode",{parentName:"p"},"MetaTransaction"),", i.e., a representation with an ABI encoded ",Object(l.b)("inlineCode",{parentName:"p"},"data")," field."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-ts"},"encodeMulti(metaTransaction: MetaTransaction): MetaTransaction\n")),Object(l.b)("p",null,"The second step takes an array of ",Object(l.b)("inlineCode",{parentName:"p"},"MetaTransaction")," objects, and encodes it into a single ",Object(l.b)("inlineCode",{parentName:"p"},"MetaTransaction")," object describing the call to the ",Object(l.b)("inlineCode",{parentName:"p"},"MultiSend")," contract where the individual transactions are packed encoded into ",Object(l.b)("inlineCode",{parentName:"p"},"data"),".\nThis is implemented in the ",Object(l.b)("a",{parentName:"p",href:"/react-multisend/api/encodeMulti"},Object(l.b)("inlineCode",{parentName:"a"},"encodeMulti"))," function."),Object(l.b)("h3",{id:"example"},"Example"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-ts"},"import { isValid, encodeSingle, encodeMulti } from 'react-multisend'\n\nif (transactionInputs.every(isValid)) {\n  const multiSendTransaction = encodeMulti(transactionInputs.map(encodeSingle))\n}\n")),Object(l.b)("p",null,"There are various options for executing a multi-send transaction encoded this way:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"from any enabled Safe/Zodiac module via ",Object(l.b)("inlineCode",{parentName:"li"},"executeTransactionFromModule")," (see: ",Object(l.b)("a",{parentName:"li",href:"https://github.com/gnosis/zodiac/blob/master/contracts/core/Module.sol#L43"},"Zodiac Module base contract"),")"),Object(l.b)("li",{parentName:"ul"},"directly by calling the Safe's ",Object(l.b)("inlineCode",{parentName:"li"},"execTransaction")," function, providing the required owner signatures (",Object(l.b)("a",{parentName:"li",href:"https://docs.gnosis.io/safe/docs/contracts_tx_execution/"},"learn more"),")"),Object(l.b)("li",{parentName:"ul"},"collecting the required signatures on-chain, by calling ",Object(l.b)("inlineCode",{parentName:"li"},"approveHash")," upfront (",Object(l.b)("a",{parentName:"li",href:"https://docs.gnosis.io/safe/docs/contracts_tx_execution/#on-chain-approvals"},"learn more"),")"),Object(l.b)("li",{parentName:"ul"},"collecting the required signatures off-chain, by proposing the transaction using the ",Object(l.b)("a",{parentName:"li",href:"https://docs.gnosis.io/safe/docs/tutorial_tx_service_initiate_sign/"},"Safe Transaction Service"))),Object(l.b)("p",null,"Check out the ",Object(l.b)("a",{parentName:"p",href:"https://github.com/gnosis/safe-core-sdk/tree/main/packages/safe-core-sdk"},"@gnosis.pm/safe-core-sdk")," package for interacting with the Gnosis Safe contracts and the ",Object(l.b)("a",{parentName:"p",href:"https://github.com/gnosis/safe-core-sdk/tree/main/packages/safe-service-client"},"@gnosis.pm/safe-service-client")," package for using the Safe Transaction Service from JavaScript apps."))}void 0!==d&&d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/usage.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-usage-mdx-e6d06108f8695fab1f42.js.map