{"version":3,"sources":["webpack:///../docs/example.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","nanoid","ProvideMultiSendContext","createTransaction","TransactionType","TransactionBatch","classNames","React","transferFunds","batch","setBatch","safeAddress","network","value","onChange","isMDXComponent"],"mappings":"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","file":"component---docs-example-mdx-997ffb040f86e09c3ad4.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-multisend/react-multisend/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { nanoid } from 'nanoid';\nimport { ProvideMultiSendContext, createTransaction, TransactionType } from '../src';\nimport { TransactionBatch } from './example/TransactionBatch';\nimport * as classNames from './example/plain.module.css';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h1>\n    <blockquote>\n      <p parentName=\"blockquote\">{`You can find the full code of the components in the example below at `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/gnosis/react-multisend/tree/main/docs/example\"\n        }}>{`docs/example`}</a>{`.`}</p>\n    </blockquote>\n    <p>{`This is an interactive example user interface for creating multi-send transactions.`}</p>\n    <Playground __position={0} __code={'() => {\\n  const [batch, setBatch] = React.useState([\\n    createTransaction(TransactionType.transferFunds, nanoid()),\\n  ])\\n  return (\\n    <ProvideMultiSendContext\\n      safeAddress=\\\"0x1076f084A3703E1701a1a97F837906e56370D4f9\\\"\\n      network=\\\"4\\\"\\n    >\\n      <TransactionBatch\\n        value={batch}\\n        onChange={setBatch}\\n        classNames={classNames}\\n      />\\n    </ProvideMultiSendContext>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      nanoid,\n      ProvideMultiSendContext,\n      createTransaction,\n      TransactionType,\n      TransactionBatch,\n      classNames,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [batch, setBatch] = React.useState([createTransaction(TransactionType.transferFunds, nanoid())]);\n        return <ProvideMultiSendContext safeAddress=\"0x1076f084A3703E1701a1a97F837906e56370D4f9\" network=\"4\" mdxType=\"ProvideMultiSendContext\">\n        <TransactionBatch value={batch} onChange={setBatch} classNames={classNames} mdxType=\"TransactionBatch\" />\n      </ProvideMultiSendContext>;\n      }}\n    </Playground>\n    <blockquote>\n      <p parentName=\"blockquote\">{`To try the example with your own Safe, simply change the values of the `}<inlineCode parentName=\"p\">{`safeAddress`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`network`}</inlineCode>{` props in the code playground above.`}</p>\n    </blockquote>\n    <p>{`This example uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://dndkit.com\"\n      }}>{`dnd-kit`}</a>{` for drag & drop transaction reordering.\nThe component styles can be customized using css modules. The example theme can be found at `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/gnosis/react-multisend/blob/main/docs/example/plain.module.css\"\n      }}>{`docs/example/plain.module.css`}</a>{`.`}</p>\n    <p>{`For understanding the different moving parts, in the following sections we're going to break the example down into its individual components, going top-down.`}</p>\n    <h2 {...{\n      \"id\": \"transactionbatch\"\n    }}><inlineCode parentName=\"h2\">{`<TransactionBatch>`}</inlineCode></h2>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Code:`}</strong>{` `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/gnosis/react-multisend/blob/main/docs/example/TransactionBatch.tsx\"\n        }}>{`docs/example/TransactionBatch.tsx`}</a></p>\n    </blockquote>\n    <p>{`Renders the list of `}<inlineCode parentName=\"p\">{`<Transaction>`}</inlineCode>{` elements, handles adding, removing, and updating transactions.\nAlso implements the reordering of list items using the `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.dndkit.com/presets/sortable\"\n      }}>{`Sortable preset of dnd-kit`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"transaction\"\n    }}><inlineCode parentName=\"h2\">{`<Transaction>`}</inlineCode></h2>\n    <p>{`Represents a single transaction item in the batch.\nEach item has a fixed header, with a drag handle element, a title, and a remove button.\nClicking the title allows collapsing the transaction.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`<TransactionTypeSelect>`}</inlineCode>{` element allows switching between the `}<a parentName=\"p\" {...{\n        \"href\": \"/react-multisend/usage#transactionType\"\n      }}>{`different transaction types`}</a>{`.\nWhen switching the transaction type, under the hood it will replace the entire transaction item with a fresh one created using `}<a parentName=\"p\" {...{\n        \"href\": \"/react-multisend/api#createTransaction\"\n      }}><inlineCode parentName=\"a\">{`createTransaction`}</inlineCode></a>{`.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`<TransactionBody>`}</inlineCode>{` component's sole responsibility is rendering the right specific component for the respective transaction type: `}<inlineCode parentName=\"p\">{`<TransferFunds>`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<TransferCollectible>`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<CallContract>`}</inlineCode>{`, or `}<inlineCode parentName=\"p\">{`<RawTransaction>`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"transferfunds\"\n    }}><inlineCode parentName=\"h2\">{`<TransferFunds>`}</inlineCode></h2>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Code:`}</strong>{` `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/gnosis/react-multisend/blob/main/docs/example/TransferFunds.tsx\"\n        }}>{`docs/example/TransferFunds.tsx`}</a></p>\n    </blockquote>\n    <p>{`The component renders an `}<inlineCode parentName=\"p\">{`<AssetSelect>`}</inlineCode>{` (`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/gnosis/react-multisend/blob/main/docs/example/AssetSelect.tsx\"\n      }}>{`code`}</a>{`) input, which lists all ERC20 tokens that the Safe holds a balance of.\nThis information is provided by the `}<a parentName=\"p\" {...{\n        \"href\": \"/react-multisend/usage#usesafebalances-hook\"\n      }}><inlineCode parentName=\"a\">{`useSafeBalances`}</inlineCode>{` hook`}</a>{`.`}</p>\n    <p>{`The same hook also powers the `}<inlineCode parentName=\"p\">{`<AmountInput>`}</inlineCode>{` (`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/gnosis/react-multisend/blob/main/docs/example/AmountInput.tsx\"\n      }}>{`code`}</a>{`) component. Here the Safe's balance of the selected token is used to control the maximum amount the user will be able to enter.`}</p>\n    <h2 {...{\n      \"id\": \"transfercollectible\"\n    }}><inlineCode parentName=\"h2\">{`<TransferCollectible>`}</inlineCode></h2>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Code\"`}</strong>{` `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/gnosis/react-multisend/blob/main/docs/example/TransferCollectible.tsx\"\n        }}>{`docs/example/TransferCollectible.tsx`}</a></p>\n    </blockquote>\n    <p>{`The most notable component here is `}<inlineCode parentName=\"p\">{`<CollectibleSelect>`}</inlineCode>{` (`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/gnosis/react-multisend/blob/main/docs/example/CollectibleSelect.tsx\"\n      }}>{`code`}</a>{`) which uses the `}<a parentName=\"p\" {...{\n        \"href\": \"/react-multisend/usage#usesafebalances-hook\"\n      }}><inlineCode parentName=\"a\">{`useSafeCollectibles`}</inlineCode>{` hook`}</a>{` to render a select input with all collectibles held in the Safe.\nCollectibles are grouped by their token contracts.`}</p>\n    <h2 {...{\n      \"id\": \"callcontract\"\n    }}><inlineCode parentName=\"h2\">{`<CallContract>`}</inlineCode></h2>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Code:`}</strong>{` `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/gnosis/react-multisend/blob/main/docs/example/CallContract.tsx\"\n        }}>{`docs/example/CallContract.tsx`}</a></p>\n    </blockquote>\n    <p>{`This component is powered by the `}<inlineCode parentName=\"p\">{`useContractCall`}</inlineCode>{` hook, which provides the contract interface information necessary for rendering input elements for all parameters of the selected contract function.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}