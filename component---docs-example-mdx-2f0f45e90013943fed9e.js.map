{"version":3,"sources":["webpack:///../docs/example.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","nanoid","ProvideMultiSendContext","createTransaction","TransactionType","TransactionBatch","classNames","React","transferFunds","batch","setBatch","safeAddress","network","value","onChange","isMDXComponent"],"mappings":"gVAaaA,EAAe,Q,kMAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,kBACE,GAAM,WADR,WAGA,8BACE,iBAAGC,WAAW,cAAd,wEAAoG,iBAAGA,WAAW,IAC9G,KAAQ,oEADwF,gBAApG,MAIF,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,maAAwaC,SAAO,GAChdL,QACAH,kBACAS,eACAC,UACAC,WACAC,4BACAC,sBACAC,oBACAC,qBACAC,cAVgd,gBAWhdhB,IAXgd,EAYhdH,eAZgd,GAa/cO,QAAQ,eACZ,WACK,MAA0Ba,WAAe,CAACJ,YAAkBC,IAAgBI,cAAeP,iBAApFQ,EAAP,KAAcC,EAAd,KACA,OAAO,YAAC,IAAD,CAAyBC,YAAY,6CAA6CC,QAAQ,IAAIlB,QAAQ,2BAC7G,YAAC,IAAD,CAAkBmB,MAAOJ,EAAOK,SAAUJ,EAAUJ,WAAYA,EAAYZ,QAAQ,yBAIxF,0CAAyB,iBAAGC,WAAW,IACnC,KAAQ,sBADa,WAAzB,8KAIA,iFAAgE,0BAAYA,WAAW,KAAvB,eAAhE,QAAgI,0BAAYA,WAAW,KAAvB,WAAhI,kCACA,uLACA,kBACE,GAAM,8BACL,0BAAYA,WAAW,MAAvB,sBAFH,cAGA,qBAAG,sBAAQA,WAAW,KAAnB,SAAH,2CACA,4CAA2B,0BAAYA,WAAW,KAAvB,iBAA3B,4HACsD,iBAAGA,WAAW,IAChE,KAAQ,4CAD0C,8BADtD,KAIA,kBACE,GAAM,yBACL,0BAAYA,WAAW,MAAvB,iBAFH,cAGA,2NAGA,4BAAW,0BAAYA,WAAW,KAAvB,2BAAX,yCAAwH,iBAAGA,WAAW,IAClI,KAAQ,4CAD4G,+BAAxH,qIAG6H,iBAAGA,WAAW,IACvI,KAAQ,0CACP,0BAAYA,WAAW,KAAvB,sBALL,KAMA,4BAAW,0BAAYA,WAAW,KAAvB,qBAAX,kHAA2L,0BAAYA,WAAW,KAAvB,mBAA3L,KAA4P,0BAAYA,WAAW,KAAvB,yBAA5P,KAAmU,0BAAYA,WAAW,KAAvB,kBAAnU,QAAsY,0BAAYA,WAAW,KAAvB,oBAAtY,KACA,kBACE,GAAM,wDACL,0BAAYA,WAAW,MAAvB,mBAFH,KAEqE,0BAAYA,WAAW,MAAvB,iBAFrE,QAEwI,0BAAYA,WAAW,MAAvB,iBAFxI,eAGA,6BACA,kBACE,GAAM,wDACL,0BAAYA,WAAW,MAAvB,yBAFH,QAE8E,0BAAYA,WAAW,MAAvB,uBAF9E,eAGA,6BACA,kBACE,GAAM,0BACL,0BAAYA,WAAW,MAAvB,kBAFH,cAGA,mC,gMAKJJ,EAAWwB,gBAAiB","file":"component---docs-example-mdx-2f0f45e90013943fed9e.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-multisend/react-multisend/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { nanoid } from 'nanoid';\nimport { ProvideMultiSendContext, createTransaction, TransactionType } from '../src';\nimport { TransactionBatch } from './example/TransactionBatch';\nimport * as classNames from './example/plain.module.css';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h1>\n    <blockquote>\n      <p parentName=\"blockquote\">{`You can find the full code of the components in the example below at `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/gnosis/react-multisend/tree/main/docs/example\"\n        }}>{`docs/example`}</a>{`.`}</p>\n    </blockquote>\n    <Playground __position={0} __code={'() => {\\n  const [batch, setBatch] = React.useState([\\n    createTransaction(TransactionType.transferFunds, nanoid()),\\n  ])\\n  return (\\n    <ProvideMultiSendContext\\n      safeAddress=\\\"0x1076f084A3703E1701a1a97F837906e56370D4f9\\\"\\n      network=\\\"4\\\"\\n    >\\n      <TransactionBatch\\n        value={batch}\\n        onChange={setBatch}\\n        classNames={classNames}\\n      />\\n    </ProvideMultiSendContext>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      nanoid,\n      ProvideMultiSendContext,\n      createTransaction,\n      TransactionType,\n      TransactionBatch,\n      classNames,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [batch, setBatch] = React.useState([createTransaction(TransactionType.transferFunds, nanoid())]);\n        return <ProvideMultiSendContext safeAddress=\"0x1076f084A3703E1701a1a97F837906e56370D4f9\" network=\"4\" mdxType=\"ProvideMultiSendContext\">\n        <TransactionBatch value={batch} onChange={setBatch} classNames={classNames} mdxType=\"TransactionBatch\" />\n      </ProvideMultiSendContext>;\n      }}\n    </Playground>\n    <p>{`This example uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://dndkit.com\"\n      }}>{`dnd-kit`}</a>{` for drag&drop transaction reordering.\nThe component styles can be customized using css modules. The example theme can be found at `}{`[docs/example/plain.module.css]`}{`.`}</p>\n    <p>{`To try the example with your own Safe, simply change the `}<inlineCode parentName=\"p\">{`safeAddress`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`network`}</inlineCode>{` props in the playground code.`}</p>\n    <p>{`For understanding the different moving parts, in the following sections we're going to break the example down into it's individual components, going top-down.`}</p>\n    <h2 {...{\n      \"id\": \"transactionbatch-component\"\n    }}><inlineCode parentName=\"h2\">{`<TransactionBatch>`}</inlineCode>{` component`}</h2>\n    <p><strong parentName=\"p\">{`Code:`}</strong>{` `}{`[docs/example/TransactionBatch.tsx]`}</p>\n    <p>{`Renders the list of `}<inlineCode parentName=\"p\">{`<Transaction>`}</inlineCode>{` elements, handles adding, removing, and updating transactions.\nAlso implementes the reordering of list items using the `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.dndkit.com/presets/sortable\"\n      }}>{`Sortable preset of dnd-kit`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"transaction-component\"\n    }}><inlineCode parentName=\"h2\">{`<Transaction>`}</inlineCode>{` component`}</h2>\n    <p>{`Represents a single transaction item in the batch.\nEach item has a fixed header, with a drag handle element, a title, and a remove button.\nClicking the title allows collapsing the transaction.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`<TransactionTypeSelect>`}</inlineCode>{` element allows switching between the `}<a parentName=\"p\" {...{\n        \"href\": \"/react-multisend/encode#transactionTypes\"\n      }}>{`different transaction types`}</a>{`.\nWhen switching the transaction type, under the hood it will replace the entire transaction item with a fresh one created using `}<a parentName=\"p\" {...{\n        \"href\": \"/react-multisend/api#createTransaction\"\n      }}><inlineCode parentName=\"a\">{`createTransaction`}</inlineCode></a>{`.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`<TransactionBody>`}</inlineCode>{` component's sole responsibiity is rendering the right specific component for the respective transaction type: `}<inlineCode parentName=\"p\">{`<TransferFunds>`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<TransferCollectible>`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<CallContract>`}</inlineCode>{`, or `}<inlineCode parentName=\"p\">{`<RawTransaction>`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"transferfunds-assetselect-and-amountinput-components\"\n    }}><inlineCode parentName=\"h2\">{`<TransferFunds>`}</inlineCode>{`, `}<inlineCode parentName=\"h2\">{`<AssetSelect>`}</inlineCode>{` and `}<inlineCode parentName=\"h2\">{`<AmountInput>`}</inlineCode>{` components`}</h2>\n    <p>{`TODO`}</p>\n    <h2 {...{\n      \"id\": \"transfercollectible-and-collectibleselect-components\"\n    }}><inlineCode parentName=\"h2\">{`<TransferCollectible>`}</inlineCode>{` and `}<inlineCode parentName=\"h2\">{`<CollectibleSelect>`}</inlineCode>{` components`}</h2>\n    <p>{`TODO`}</p>\n    <h2 {...{\n      \"id\": \"callcontract-component\"\n    }}><inlineCode parentName=\"h2\">{`<CallContract>`}</inlineCode>{` component`}</h2>\n    <p>{`TODO`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}